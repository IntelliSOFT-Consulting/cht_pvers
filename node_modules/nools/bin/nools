#!/usr/bin/env node


var nools = require(".."),
    path = require("path"),
    fs = require("fs"),
    path = require("path"),
    stdout = process.stdout,
    template = fs.readFileSync(path.join(__dirname, "assets", "compile_wrapper.tmpl"), "utf8"),
    str = require("string-extended"),
    uglifyjs = require("uglify-js"),
    program = require('commander');

function uglify(source, program) {
    try {
        if (program.no_minification) {
            return source;
        } else if (program.beautify) {
            return uglifyjs.minify(source, {fromString: true, mangle: false, compress: false, output: {beautify: true}}).code;
        } else {
            return uglifyjs.minify(source, {fromString: true, mangle: false}).code;
        }
    } catch (e) {
        console.error(e.message);
        console.error(e.stack);
    }
}

program
    .version('0.0.1');


program.command("compile")
    .usage('[options] <file ...>')
    .description("compile nools dsl")
    .option("-n --name [value]", "name of the flow to compile, defaults to the name of the file less the extension")
    .option("-l --nools_location [value]", "location to look for nools when requiring it")
    .option("-u --no_minification", "Do not minify the generated script")
    .option("-b --beautify", "beautify the generated source")
    .action(function () {
        var files = Array.prototype.slice.call(arguments);
        var program = files.pop();
        var noolsLocation = program["nools_location"] || "nools";
        files.forEach(function (file) {
            var name = program.name || path.basename(file, path.extname(file));
            stdout.write(uglify(str.format(template, { source: nools.transpile(path.resolve(process.cwd(), file), {name: name}), noolsLocation: noolsLocation}), program));
        });
    });

program.parse(process.argv);





